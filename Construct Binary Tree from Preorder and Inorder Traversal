/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

    TreeNode * solve(vector<int>& preorder, vector<int>& inorder,int left,int right,
    unordered_map<int,int>&in,int &preIndex)
    {
        if(left > right) //means there is no element 
        {
            return NULL;
        }
        int element=preorder[preIndex++]; //everytime the first of pre will be root
        TreeNode *root=new TreeNode(element);

        int position=in[element]; 
        // findng where the root lies in inorder array,now call for it's left and right

        root->left=solve(preorder,inorder,left,position-1,in,preIndex);
        root->right=solve(preorder,inorder,position+1,right,in,preIndex);

        return root;
    }



public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int,int>in;

        for(int i=0;i<preorder.size();i++)
        {
            in[inorder[i]]=i;
        }
        int preIndex=0;
        return solve(preorder,inorder,0,preorder.size()-1,in,preIndex);
    }
};

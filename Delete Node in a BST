/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        //step 1->findfing the node,
        // step2->dlt it

        if(root==NULL) return NULL;
        if(root->val==key)
        {
            return helper(root);
        }

        TreeNode * dummy=root;

        while(root!=NULL)
        {
            if(root->val > key)
            {
                //if we found the node ,in the left,then call the helper func
                //helper fucn,will root->
                if(root->left!=NULL && root->left->val==key)
                {
                    root->left=helper(root->left);
                    break;
                }
                else
                {
                    root=root->left;
                }
            }
            else{
                if(root->right!=NULL && root->right->val==key)
                {
                    root->right=helper(root->right);
                    break;
                }
                else
                {
                    root=root->right;
                }
            }
        }
        return dummy;
    }

    TreeNode *helper(TreeNode *root)
    {
        if(root->left==NULL)
        {
            return root->right;
        }
        else if(root->right==NULL)
        {
            return root->left;
        }

        //at first ,make the deleteed node's right as we will need that for connection 
        TreeNode * rightchild=root->right;

        //find the rightmost node,make it's right as the rightchild
        TreeNode * lastright=mostright(root->left);

        lastright->right=rightchild;
        return root->left;

    }

    TreeNode * mostright(TreeNode * root)
    {
        while(root->right!=NULL)
        {
            root=root->right;
        }
        return root;
    }

};


class Solution{
    private:
    Node * parent_check(unordered_map<Node*,Node*> &parentNode,Node *root,int target)
    {
      Node*tar=NULL;
      queue<Node*>q;
      q.push(root);
      parentNode[root]=NULL;
      while(!q.empty())
      {
          Node*front=q.front();
          q.pop();
          if(front->data==target)
          tar=front;
          if(front->left)
          {
              parentNode[front->left]=front;
              q.push(front->left);
          }
          if(front->right)
          {
              parentNode[front->right]=front;
              q.push(front->right);
          }
      }
      return tar;
        
       
    }
public:
    int sum_at_distK(Node* root, int target, int k)
    {
        unordered_map<Node*,Node*>parentNode;
        Node* tag= parent_check(parentNode,root,target);
        unordered_map<Node * ,bool> visited;
        // cout << tag->data << endl;
        queue<Node*>q;
        q.push(tag);
        visited[tag]=true;
        int curr_index=0;
        int sum=0;
        while(!q.empty())
        {
            int size=q.size();
            if(curr_index++==k) break;
            for(int i=0;i<size;i++)
            {
                Node* node=q.front();
                sum+=node->data;
                q.pop();
                
                if(node->left && !visited[node->left])
                {
                    q.push(node->left);
                    visited[node->left]=true;
                }
                if(node->right && !visited[node->right])
                {
                    q.push(node->right);
                    visited[node->right]=true;
                }
                if(parentNode[node] && !visited[parentNode[node]])
                {
                    q.push(parentNode[node]);
                    visited[parentNode[node]]=true;
                }
            }
        }
        
        
         while(!q.empty())
         {
            sum += q.front()->data;
            q.pop();
          }
        return sum;
    }
};






// } Driver Code Ends

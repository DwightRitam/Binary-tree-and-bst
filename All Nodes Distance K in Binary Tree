/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    private:

    void parent_track(unordered_map<TreeNode *,TreeNode*> &parentNode,TreeNode * root)
    {
        queue<TreeNode*>q;
        q.push(root);

        while(!q.empty())
        {
            
            int size=q.size();
            for(int i=0;i<size;i++)
            {
                TreeNode *node=q.front();
                q.pop();
                if(node->left)
                {
                    parentNode[node->left]=node;
                    q.push(node->left);
                }
                 if(node->right)
                {
                    parentNode[node->right]=node;
                    q.push(node->right);
                }
            }
        }
    }
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode *,TreeNode*> parentNode;
        parent_track(parentNode,root);

        unordered_map<TreeNode*,bool>visited;
        queue<TreeNode*>q;
        q.push(target);
        visited[target]=true;
        int currIndex=0;
        while(!q.empty())
        {
            int size=q.size();
            if(currIndex++==k) break;
            for(int i=0;i<size;i++)
            {
                TreeNode *node=q.front();
                q.pop();
                if(node->left && !visited[node->left])
                {
                    visited[node->left]=true;
                    q.push(node->left);
                }
                 if(node->right && !visited[node->right])
                {
                    visited[node->right]=true;
                    q.push(node->right);
                }
                if(parentNode[node] && !visited[parentNode[node]])
                {
                    q.push(parentNode[node]);
                    visited[parentNode[node]]=true;
                }
            }
        }

        vector<int> ans;

        while(!q.empty())
        {
            TreeNode * node=q.front(); q.pop();
            ans.push_back(node->val);
        }
        return ans;

    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
TreeNode * solve(vector<int>& postorder, vector<int>& inorder,int left,int right,int &postorderindex, unordered_map <int,int> &mp)
     {

         if( left > right)
         {
             return NULL;
         }

         int element = postorder[postorderindex--]; // current root element

         TreeNode * root=  new TreeNode (element);

         int position= mp[element]; 
         // finding , where the root exist in inorder

         // then call the function for the left of root and right of root

        root->right=solve(postorder,inorder,position+1,right,postorderindex,mp);
        root->left= solve(postorder,inorder,left,position-1,postorderindex,mp);


         return root;

         
     }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {

         // we know that in postorder it's ->  left right root
        //and in inorder it's -> left root right
       
        unordered_map<int,int> mp;
        //for finding the inorder index
         for(int i=0;i< inorder.size();i++)
         {
             mp[inorder[i]]=i;
         }
        // inorderIndex(inorder,mp);

        int postorderindex=postorder.size() -1;
        
        return solve(postorder,inorder,0,inorder.size()-1,postorderindex,mp);
        
    }
};

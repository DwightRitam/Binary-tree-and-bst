/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

TreeNode* mapping(TreeNode* root, int target, unordered_map<TreeNode*,TreeNode*>&nodetoparent)
  {
      TreeNode*tar=NULL;
      queue<TreeNode*>q;
      q.push(root);
      nodetoparent[root]=NULL;
      while(!q.empty())
      {
          int size=q.size();
          
          for(int i=0;i<size;i++)
          {
            TreeNode * front=q.front();
            if(front->val==target)

          tar=front;
          q.pop();
          if(front->left)
          {
              nodetoparent[front->left]=front;
              q.push(front->left);
          }
          if(front->right)
          {
              nodetoparent[front->right]=front;
              q.push(front->right);
          }
          }
      }
      return tar;
  }
    int burning(TreeNode*root,unordered_map<TreeNode*,TreeNode*>&nodetoparent)
  {
      unordered_map<TreeNode*,bool>visited;
      queue<TreeNode*>q;
      q.push(root);
      visited[root]=true;
      int ans=0;
      while(!q.empty())
      {
          int flag=0;
          int size=q.size();
          for(int i=0;i<size;i++)
          {
              TreeNode*front=q.front();
              q.pop();
              if(front->left && !visited[front->left])
              {
                  visited[front->left]=true;
                  flag=1;
                  q.push(front->left);
              }
              if(front->right && !visited[front->right])
              {
                  visited[front->right]=true;
                  flag=1;
                  q.push(front->right);
              }
              if(nodetoparent[front] && !visited[nodetoparent[front]])
              {
                  visited[nodetoparent[front]]=true;
                  flag=1;
                  q.push(nodetoparent[front]);
              }
          }
          if(flag==1)
          ans++;
      }
      return ans;
      
      
  }
  
    int amountOfTime(TreeNode* root, int start) {

        //burn tree problem

        unordered_map<TreeNode*,TreeNode*>nodetoparent;
        TreeNode* targetnode=mapping(root,start,nodetoparent);
        int ans=burning(targetnode,nodetoparent);
        return ans;


        
    }
};

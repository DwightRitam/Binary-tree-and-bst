/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string ans="";
        if(!root) return ans;

        queue<TreeNode *>q;
        q.push(root);

        while(!q.empty())
        {
            TreeNode * currNode=q.front();
            q.pop();

            if(currNode==NULL)
            {
                ans+="#,";
            }
            else
            {
                 ans+=to_string(currNode->val);
                 ans+=',';
            }
            //one tweak,even if it's null add it
            if(currNode!=NULL)
            {
                q.push(currNode->left);
                q.push(currNode->right);
            }
        }
        return ans;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        
        if(data.size()==0) return NULL;

        //making the string as object
        stringstream s(data);
        string str;
        //how to take one string
        getline(s,str,',');
        TreeNode *root=new TreeNode(stoi(str));
        queue<TreeNode * >q;
        q.push(root);

        while(!q.empty())
        {
            TreeNode *node=q.front();
            q.pop();

            //now check for left one in the string
            getline(s,str,',');
            if(str=="#")
            {
                node->left=NULL;
            }
            else{
                TreeNode *leftNode=new TreeNode(stoi(str));

                node->left=leftNode;
                q.push(leftNode);
            }
            //now check for right one in the string    
            getline(s,str,',');
            if(str=="#")
            {
                node->right=NULL;
            }
            else{
                TreeNode *rightNode=new TreeNode(stoi(str));

                node->right=rightNode;
                q.push(rightNode);
            }
        }
        return root;


    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));

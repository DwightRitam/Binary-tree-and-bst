/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    private:
    void solve(TreeNode* node,vector<int>& ans,int level)
    {

        // intuition: go to right first and then left,
        //while going right check if the count==ds ,if yes means we are going 
        // to the right for the first time
        if(node==NULL) return;

        // means it's the first time we are visiting right node
        if(level==ans.size()) 
        {
            ans.push_back(node->val);
        }

        if(node->right)
        {
            solve(node->right,ans,level+1);
        }
         if(node->left)
        {
            solve(node->left,ans,level+1);
        }
        
    }
public:
    vector<int> rightSideView(TreeNode* root) {
        //we can do the level order also ,but it will take more space 
        vector<int> ans;
        if(root==NULL) return ans;

        solve(root,ans,0);
        return ans;
    }
};

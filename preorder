/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

// void helper(vector<int>& ans,TreeNode * root)
// {
//     if(root==NULL) return ;
//     ans.push_back(root->val);
//     helper(ans,root->left);
//     helper(ans,root->right);
// }
    vector<int> preorderTraversal(TreeNode* root) {
        //using recursion
        // vector<int> ans;

        // helper(ans,root);

        // return ans;

        //using loop


        vector<int> preorder;
        stack<TreeNode*> st;
        if(root==NULL) return preorder;

        st.push(root);
        while(!st.empty())
        {
            root=st.top();
            st.pop();
            preorder.push_back(root->val);
            // we know that stack is lifo based data,so as we know preorder is
            // root left right,so we add right first then left first,so
            //left can be on the top of the stack
            if(root->right)
            {
                st.push(root->right);
            } 
            if(root->left)
            {
                st.push(root->left);
            }
        }

        return preorder;
        
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(!root) return 0;

        int ans=0;
        queue<pair<TreeNode *,int>> q; //{root,cuurent min element from level}
        q.push({root,0});

        while(!q.empty())
        {
            int size=q.size();
            int levelMin=q.front().second; 
            int last,first;
            for(int i=0;i<size;i++)
            {
              long long curr_lv=q.front().second-levelMin; //to always start with min 0
              TreeNode * node=q.front().first;
              q.pop();
              if(i==0) first=curr_lv;
              if(i==size-1) last=curr_lv;
              if(node->left)
              {
                  q.push({node->left,2*curr_lv+1});
              }
              if(node->right)
              {
                  q.push({node->right,2*curr_lv+2});
              }
            }
            
            ans=max(ans,last-first+1);
            
        }
        return ans;
    }
};


  

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
   
    bool isBalanced(TreeNode* root) {
        // cout << dfsHeight(root);
        return dfsHeight(root) !=-1;
    }
    int dfsHeight(TreeNode * root)
    {
        //check for the left node and right node,if one of them's height =-1,
        //then return -1, and when abs(left - right)>1 return -1;

        if(root==NULL) return 0;
        int leftHeight=dfsHeight(root->left);
        if(leftHeight==-1) return -1;
        int rightHeight=dfsHeight(root->right);
        if(rightHeight==-1) return -1;

        if(abs(leftHeight-rightHeight)>1) return -1;
        return 1+max(leftHeight,rightHeight);
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        //multiset beacause in the same level there can be same values
        map<int,map<int,multiset<int>>> nodes; //{vertical,{level,node}}
        queue<pair<TreeNode *,pair<int,int>>>q; //{node,{level,vertical}}
        q.push({root,{0,0}});

        while(!q.empty())
        {
            auto it=q.front();
            TreeNode * node= it.first;
            int level=it.second.first;
            int vertical=it.second.second;
            q.pop();
            //this will make sure that the elements are inserted in the set in a
            // ascending manner ,so -1(vertical) 
            nodes[vertical][level].insert(node->val);
            if(node->left)
            {
                q.push({node->left,{level+1,vertical-1}});
            }
             if(node->right)
            {
                q.push({node->right,{level+1,vertical+1}});
            }
        }
        vector<vector<int>> ans;

        for(auto it:nodes) //{it= vertical,{level,nodes}}
        {
            // cout << it.first << endl;
            vector<int>level;
            for(auto node:it.second)
            {
                level.insert(level.end(),node.second.begin(),node.second.end());
            }
            ans.push_back(level);
        }
        return ans;
    }
};
